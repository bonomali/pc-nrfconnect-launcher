trigger:
- internal/release/*

jobs:
- job: Build
  variables:
  - group: wayland
  - name: TZ
    value: 'Europe/Oslo'
  - name: WIN_TZ
    value: 'W. Europe Standard Time'
  - name: NODE_VERSION
    value: 10.15.0
  strategy:
    matrix:
      linux:
        IMAGE_NAME: 'ubuntu-16.04'
      macOS:
        IMAGE_NAME: 'macos-10.13'
      win32:
        IMAGE_NAME: 'vs2017-win2016'
        ARCH: 'ia32'
        NODE_ARCH: '32'

  pool:
    vmImage: $(IMAGE_NAME)
  steps:
  - script: |
      npm config set strict-ssl false
      npm config set //npm.nordicsemi.no/:_authToken $(WAYLAND_NPM_TOKEN_INTERNAL)
      npm config set registry https://npm.nordicsemi.no/
      npm config set @babel:registry https://registry.npmjs.org/
      npm config set @cnakazawa:registry https://registry.npmjs.org/
      npm config set @jest:registry https://registry.npmjs.org/
      npm config set @mdi:registry https://registry.npmjs.org/
      npm config set @protobufjs:registry https://registry.npmjs.org/
      npm config set @react-bootstrap:registry https://registry.npmjs.org/
      npm config set @restart:registry https://registry.npmjs.org/
      npm config set @serialport:registry https://registry.npmjs.org/
      npm config set @sindresorhus:registry https://registry.npmjs.org/
      npm config set @szmarczak:registry https://registry.npmjs.org/
      npm config set @types:registry https://registry.npmjs.org/
      npm config set @webassemblyjs:registry https://registry.npmjs.org/
      npm config set @xtuc:registry https://registry.npmjs.org/

    displayName: 'Setup NPM registry for internal workflow'
  - script: tzutil /s "$(WIN_TZ)"
    condition: contains(variables['IMAGE_NAME'], 'win')
    displayName: 'Fix Windows timezone'
  - task: NodeTool@0
    inputs:
      versionSpec: $(NODE_VERSION)
    condition: ne(variables['NODE_ARCH'], '32')
    displayName: 'Install Node.js $(NODE_VERSION)'
  - bash: |
      set -o errexit -o pipefail
      choco install -y nvm
      export PATH=$NVM_HOME:$PATH
      nvm install $(NODE_VERSION) $(NODE_ARCH)
      nvm use $(NODE_VERSION) $(NODE_ARCH)
      ln -sf "$NVM_SYMLINK/node" "$NODE_SYMLINK/node"
    env: {
      NVM_HOME: "/C/ProgramData/nvm",
      NVM_SYMLINK: "/C/ProgramData/nvm/v$(NODE_VERSION)",
      NODE_SYMLINK: "/C/Program Files/nodejs",
    }
    condition: and(contains(variables['IMAGE_NAME'], 'win'), eq(variables['NODE_ARCH'], '32'))
    displayName: 'Install Node.js $(NODE_VERSION) 32-bit'
  - bash: |
      set -o errexit -o pipefail
      sudo apt-get update
      sudo apt-get install libudev-dev
    condition: contains(variables['IMAGE_NAME'], 'ubuntu')
    displayName: 'Setup build environment for Linux'
  - bash: |
      npm config set strict-ssl false
      npm config set //npm.nordicsemi.no/:_authToken $(WAYLAND_NPM_TOKEN_INTERNAL)
      npm config set registry https://npm.nordicsemi.no/
      npm config set @babel:registry https://registry.npmjs.org/
      npm config set @cnakazawa:registry https://registry.npmjs.org/
      npm config set @jest:registry https://registry.npmjs.org/
      npm config set @mdi:registry https://registry.npmjs.org/
      npm config set @protobufjs:registry https://registry.npmjs.org/
      npm config set @react-bootstrap:registry https://registry.npmjs.org/
      npm config set @restart:registry https://registry.npmjs.org/
      npm config set @serialport:registry https://registry.npmjs.org/
      npm config set @sindresorhus:registry https://registry.npmjs.org/
      npm config set @szmarczak:registry https://registry.npmjs.org/
      npm config set @types:registry https://registry.npmjs.org/
      npm config set @webassemblyjs:registry https://registry.npmjs.org/
      npm config set @xtuc:registry https://registry.npmjs.org/
      # Config below fixes the timeout issue
      npm config set fetch-retries 20
      npm config set fetch-retry-factor 100
      npm config set fetch-retry-mintimeout 100000
      npm config set fetch-retry-maxtimeout 600000
    displayName: 'Setup NPM registry for internal workflow'
  - bash: |
      set -o errexit -o pipefail
      npm i
      npm run lint
      npm run build
      npm test
    displayName: 'Build'
  - bash: |
      sudo apt-get install icnsutils
    condition: and(ne(variables['Build.Reason'], 'PullRequest'), contains(variables['IMAGE_NAME'], 'ubuntu'))
    displayName: 'Setup release environment for Linux'
  - bash: |
      npx build -p never
    condition: and(ne(variables['Build.Reason'], 'PullRequest'), contains(variables['IMAGE_NAME'], 'ubuntu'))
    displayName: 'Release on Linux'
  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'NORDIC_SIGNING_CERTIFICATE.pfx'
    condition: and(ne(variables['Build.Reason'], 'PullRequest'), contains(variables['IMAGE_NAME'], 'win'))
    displayName: 'Donwload certificate on Windows'
  - script: |
      set CSC_LINK=$(Agent.TempDirectory)\NORDIC_SIGNING_CERTIFICATE.pfx
      set CSC_KEY_PASSWORD=$(NORDIC_SIGNING_CERTIFICATE_PASSWORD_PFX)
      npx build -p never
    condition: and(ne(variables['Build.Reason'], 'PullRequest'), contains(variables['IMAGE_NAME'], 'win'))
    displayName: 'Release on Windows'
  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'NORDIC_SIGNING_CERTIFICATE.p12'
    condition: and(ne(variables['Build.Reason'], 'PullRequest'), contains(variables['IMAGE_NAME'], 'mac'))
    displayName: 'Donwload certificate on macOS'
  - bash: |
      export CSC_LINK=$(Agent.TempDirectory)/NORDIC_SIGNING_CERTIFICATE.p12
      export CSC_KEY_PASSWORD=$(NORDIC_SIGNING_CERTIFICATE_PASSWORD_P12)
      npx build -p never
    condition: and(ne(variables['Build.Reason'], 'PullRequest'), contains(variables['IMAGE_NAME'], 'mac'))
    displayName: 'Release on macOS'
  - bash: |
      set -o errexit -o pipefail
      cp release/*.exe "$(Build.ArtifactStagingDirectory)" || :
      cp release/*.zip "$(Build.ArtifactStagingDirectory)" || :
      cp release/*.dmg "$(Build.ArtifactStagingDirectory)" || :
      cp release/*.tar.gz "$(Build.ArtifactStagingDirectory)" || :
      cp release/*.AppImage "$(Build.ArtifactStagingDirectory)" || :
      cp release/latest* "$(Build.ArtifactStagingDirectory)"
    condition: ne(variables['Build.Reason'], 'PullRequest')
    displayName: 'Copy artifacts'
  - task: GitHubRelease@0
    inputs:
      gitHubConnection: 'waylandCI'
      repositoryName: 'NordicSemiconductor/pc-nrfconnect-launcher'
      action: 'edit'
      tagSource: 'Git tag'
      tag: '$(Build.SourceBranchName)'
      assetUploadMode: 'replace'
      isDraft: 'true'
      addChangeLog: 'false'
    condition: ne(variables['Build.Reason'], 'PullRequest')
